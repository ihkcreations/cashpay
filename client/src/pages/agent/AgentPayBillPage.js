// client/src/pages/agent/AgentPayBillPage.js
import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import api from '../../api/api';
import { useAuth } from '../../context/AuthContext';
import logoPath from '../../assets/CashPayLogo.png';

// Reusing BILLER_CATEGORIES mock from user's PayBillPage or define/import here
// Ensure this matches the one in user's PayBillPage.js for consistency
const BILLER_CATEGORIES = {
    electricity: { name: '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé', icon: 'üí°', billers: [
        { id: 'palli_prepaid', name: 'Palli Bidyut (Prepaid)', details: '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé', customerIdLabel: '‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞' },
        { id: 'palli_postpaid', name: 'Palli Bidyut (Postpaid)', details: '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé', customerIdLabel: '‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞'  },
        { id: 'desco_prepaid', name: 'DESCO (Prepaid)', details: '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé', customerIdLabel: '‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü/‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞'  },
        { id: 'desco_postpaid', name: 'DESCO (Postpaid)', details: '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé', customerIdLabel: '‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞'  },
    ]},
    gas: { name: '‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏', icon: 'üî•', billers: [
        { id: 'titas_postpaid', name: 'Titas Gas Postpaid (Metered)', details: '‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏', customerIdLabel: '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°' },
        { id: 'jalalabad_gas', name: 'Jalalabad Gas', details: '‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏', customerIdLabel: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞' },
    ]},
    water: { name: '‡¶™‡¶æ‡¶®‡¶ø', icon: 'üíß', billers: [
        { id: 'dhaka_wasa', name: 'Dhaka WASA', details: '‡¶™‡¶æ‡¶®‡¶ø', customerIdLabel: '‡¶¨‡¶ø‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞' },
        { id: 'chattogram_wasa', name: 'Chattogram WASA', details: '‡¶™‡¶æ‡¶®‡¶ø', customerIdLabel: '‡¶ï‡¶®‡¶ú‡¶ø‡¶â‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞' },
    ]},
    internet: { name: '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü', icon: 'üåê', billers: [
        { id: 'samonline', name: 'Samonline ISP', details: '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü', customerIdLabel: '‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ/‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø' },
        { id: 'link3', name: 'Link3 Technologies', details: '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü', customerIdLabel: '‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø' },
        { id: 'amberit', name: 'AmberIT', details: '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü', customerIdLabel: '‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø' },
    ]},
};


function AgentPayBillPage() {
    const [step, setStep] = useState(1);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategoryKey, setSelectedCategoryKey] = useState(null);
    const [availableBillers, setAvailableBillers] = useState([]);
    const [selectedBiller, setSelectedBiller] = useState(null);
    const [userMobileNumber, setUserMobileNumber] = useState(''); // Optional: User's mobile for whom bill is paid
    const [accountNumber, setAccountNumber] = useState(''); // Bill account/customer number
    const [amount, setAmount] = useState('');
    const [agentPin, setAgentPin] = useState(''); // Agent's PIN
    const [reference, setReference] = useState('');

    const [error, setError] = useState('');
    const [message, setMessage] = useState('');
    const [loading, setLoading] = useState(false); // For API call processing
    const [uiLoading, setUiLoading] = useState(false); // For initial UI elements like fetching billers (if API based)
    const [transactionDetails, setTransactionDetails] = useState(null);

    const {user: currentAgent, updateUser: updateCurrentAgent } = useAuth();
    const navigate = useNavigate();

    const [confirmHoldTime, setConfirmHoldTime] = useState(0);
    const confirmIntervalRef = useRef(null);
    const CONFIRM_HOLD_DURATION = 3;

    useEffect(() => {
        if (step === 1) {
            setUiLoading(true); // Simulate loading if billers were fetched
            let billersToShow = [];
            if (selectedCategoryKey && BILLER_CATEGORIES[selectedCategoryKey]) {
                billersToShow = BILLER_CATEGORIES[selectedCategoryKey].billers;
            } else {
                Object.values(BILLER_CATEGORIES).forEach(cat => billersToShow.push(...cat.billers));
            }
            if (searchQuery) {
                const lowerQuery = searchQuery.toLowerCase();
                billersToShow = billersToShow.filter(b =>
                    b.name.toLowerCase().includes(lowerQuery) ||
                    b.details.toLowerCase().includes(lowerQuery)
                );
            }
            setAvailableBillers(billersToShow.slice(0, 15));
            setUiLoading(false);
        }
    }, [step, selectedCategoryKey, searchQuery]);

    const handleNextStep = () => {
        setError('');
        if (step === 1) {
            if (!selectedBiller) { setError('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'); return; }
            setStep(2);
        } else if (step === 2) {
            if (!accountNumber) { setError(`‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ${selectedBiller?.customerIdLabel || '‡¶¨‡¶ø‡¶≤ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞'} ‡¶¶‡¶ø‡¶®‡•§`); return; }
            const numAmount = parseFloat(amount);
            if (isNaN(numAmount) || numAmount <= 0) { setError('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§'); return; }
            if (currentAgent && currentAgent.balance < numAmount) { setError('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡•§'); return; }
            setStep(3);
        } else if (step === 3) {
            if (agentPin.length !== 5 || !/^\d{5}$/.test(agentPin)) { setError('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡ß´-‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶™‡¶ø‡¶® ‡¶¶‡¶ø‡¶®‡•§'); return; }
            setStep(4);
        }
    };

    const handleGoBack = () => {
        setError(''); setMessage('');
        if (step > 1 && step < 5) {
            setStep(prevStep => prevStep - 1);
            if (step === 2) { setAccountNumber(''); setAmount(''); setUserMobileNumber(''); }
            if (step === 3) setAgentPin('');
        } else {
            navigate('/agent/dashboard');
        }
    };

    const handleSelectCategory = (categoryKey) => {
        setSelectedCategoryKey(categoryKey);
        setSelectedBiller(null);
        setSearchQuery('');
    };
    const handleSelectBiller = (biller) => {
        setSelectedBiller(biller);
        setSearchQuery('');
    };

    const handleConfirmMouseDown = () => {
        if (loading) return;
        if (confirmIntervalRef.current) clearInterval(confirmIntervalRef.current);
        setConfirmHoldTime(0); let chTime = 0;
        confirmIntervalRef.current = setInterval(() => {
            chTime++; setConfirmHoldTime(chTime);
            if (chTime >= CONFIRM_HOLD_DURATION) {
                if(confirmIntervalRef.current) clearInterval(confirmIntervalRef.current);
                handleAgentPayBillApiCall();
            }
        }, 1000);
    };
    const handleConfirmMouseUpOrLeave = () => {
        if (confirmIntervalRef.current) clearInterval(confirmIntervalRef.current);
        if (confirmHoldTime < CONFIRM_HOLD_DURATION && !loading) setConfirmHoldTime(0);
    };

    const handleAgentPayBillApiCall = async () => {
        setLoading(true); setError(''); setMessage('');
        try {
            const payload = {
                billerName: selectedBiller.name,
                billerCategory: BILLER_CATEGORIES[selectedCategoryKey]?.name || selectedBiller.details,
                accountNumber,
                amount: parseFloat(amount),
                agentPin,
                userMobileNumber: userMobileNumber || undefined,
                reference: reference || undefined
            };
            const { data } = await api.post('/agent/pay-bill', payload);
            setMessage(data.message || '‡¶¨‡¶ø‡¶≤ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!');
            if (data.agentNewBalance !== undefined) updateCurrentAgent({ balance: data.agentNewBalance });
            setTransactionDetails(data.transaction);
            setStep(5);
        } catch (err) {
            setError(err.response?.data?.message || '‡¶¨‡¶ø‡¶≤ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§');
            // setStep(3); // Stay on PIN step to show error
            setConfirmHoldTime(0);
        } finally {
            setLoading(false);
        }
    };


    const renderStepContent = () => {
        switch (step) {
            case 1: // Select Biller Category & Biller
                return (
                    <>
                        <div className="input-group">
                            <label htmlFor="searchQuery" className="input-label">‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</label>
                            <input type="text" id="searchQuery" className="standard-input agent-input" value={searchQuery} onChange={e=>setSearchQuery(e.target.value)} placeholder="‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®..."/>
                        </div>
                        <div className="biller-category-selector agent-biller-categories">
                            {Object.keys(BILLER_CATEGORIES).map(key => (
                                <button key={key} onClick={() => handleSelectCategory(key)} className={`category-btn agent-cat-btn ${selectedCategoryKey === key ? 'active' : ''}`}>
                                    <span className="cat-icon">{BILLER_CATEGORIES[key].icon}</span>
                                    {BILLER_CATEGORIES[key].name}
                                </button>
                            ))}
                            <button onClick={() => handleSelectCategory(null)} className={`category-btn agent-cat-btn ${!selectedCategoryKey ? 'active' : ''}`}>
                                <span className="cat-icon">üåê</span> {/* Generic icon for "All" or "Other" */}
                                ‡¶∏‡¶¨
                            </button>
                        </div>
                        <h3 className="contact-list-header agent-text">‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®</h3>
                        <div className="contact-list biller-list">
                            {uiLoading && <p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>}
                            {!uiLoading && availableBillers.length === 0 && <p style={{textAlign:'center'}}>‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶≤‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶≤‡ßá‡¶®‡¶ø‡•§</p>}
                            {availableBillers.map(biller => (
                                <div key={biller.id} className={`contact-item ${selectedBiller?.id === biller.id ? 'selected-in-list' : ''}`} onClick={() => handleSelectBiller(biller)}>
                                    <span className="contact-avatar">{BILLER_CATEGORIES[Object.keys(BILLER_CATEGORIES).find(key => BILLER_CATEGORIES[key].billers.some(b=>b.id===biller.id))]?.icon || 'üè¢'}</span>
                                    <div className="contact-details">
                                        <span className="contact-name">{biller.name}</span>
                                        <span className="contact-number">{biller.details}</span>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </>
                );
            case 2: // Enter Bill Details & Amount
                return (
                    <>
                        <div className="recipient-display static agent-theme-display">
                            <span className="label">‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶¨‡¶ø‡¶≤‡¶æ‡¶∞</span>
                            <div className="contact-item selected no-hover">
                                <span className="contact-avatar">{BILLER_CATEGORIES[selectedCategoryKey]?.icon || 'üè¢'}</span>
                                <div className="contact-details">
                                    <span className="contact-name">{selectedBiller?.name}</span>
                                    <span className="contact-number">{selectedBiller?.details}</span>
                                </div>
                            </div>
                        </div>
                        <div className="input-group">
                            <label htmlFor="userMobileNumber" className="input-label">‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</label>
                            <input type="tel" id="userMobileNumber" className="standard-input agent-input" value={userMobileNumber} onChange={e => setUserMobileNumber(e.target.value)} placeholder="01XXXXXXXXX (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)"/>
                        </div>
                        <div className="input-group">
                            <label htmlFor="accountNumber" className="input-label">{selectedBiller?.customerIdLabel || '‡¶¨‡¶ø‡¶≤ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü / ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶Ç'}</label>
                            <input type="text" id="accountNumber" className="standard-input agent-input" value={accountNumber} onChange={e => setAccountNumber(e.target.value)} required />
                        </div>
                        <div className="input-group amount-input-group agent-amount-input">
                            <label htmlFor="amount" className="visually-hidden">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</label>
                            <span className="taka-symbol">‡ß≥</span>
                            <input type="number" id="amount" className="amount-input" value={amount} onChange={e => setAmount(e.target.value)} placeholder="0" required min="1"/>
                        </div>
                        {currentAgent && (<p className="available-balance large">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏<br/>‡ß≥ {currentAgent.balance?.toFixed(2) || '0.00'}</p>)}
                    </>
                );
            case 3: // Enter Agent PIN & Reference
                return (
                    <>
                        <div className="recipient-display static agent-theme-display">
                            <span className="label">‡¶¨‡¶ø‡¶≤‡¶æ‡¶∞</span>
                            <div className="contact-item selected no-hover"><span className="contact-avatar">{BILLER_CATEGORIES[selectedCategoryKey]?.icon || 'üè¢'}</span><div className="contact-details"><span className="contact-name">{selectedBiller?.name}</span></div></div>
                        </div>
                        <div className="amount-display agent-theme-amount">
                            <span className="label">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</span>
                            <span className="amount-value">‡ß≥{parseFloat(amount)?.toFixed(2) || '0.00'}</span>
                        </div>
                        <p className="step-instruction centered-text">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶Ç: {accountNumber}</p>
                        <div className="input-group">
                            <label htmlFor="agentPin" className="input-label centered-text">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶ø‡¶® ‡¶¶‡¶ø‡¶®</label>
                            <input type="password" id="agentPin" className="pin-input large-dots agent-pin-input" value={agentPin} onChange={(e) => setAgentPin(e.target.value)} placeholder="‚óè ‚óè ‚óè ‚óè ‚óè" maxLength="5" required />
                        </div>
                        <div className="input-group">
                            <label htmlFor="reference" className="input-label">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</label>
                            <input type="text" id="reference" className="standard-input agent-input" value={reference} onChange={(e) => setReference(e.target.value)} placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶≤" />
                        </div>
                    </>
                );
            case 4: // Confirmation Screen
                return (
                    <>
                        <h2 className="feature-page-heading centered agent-theme-heading">‡¶™‡ßá ‡¶¨‡¶ø‡¶≤ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
                        <div className="confirmation-details agent-theme-confirm">
                            <div className="confirmation-row">
                                <span className="label">‡¶¨‡¶ø‡¶≤‡¶æ‡¶∞:</span>
                                <div className="contact-item selected small no-hover"><span className="contact-avatar">{BILLER_CATEGORIES[selectedCategoryKey]?.icon || 'üè¢'}</span><div className="contact-details"><span className="contact-name">{selectedBiller?.name}</span></div></div>
                            </div>
                            <div className="confirmation-grid">
                                <div className="grid-item"><span className="label">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</span><span className="value">‡ß≥{parseFloat(amount)?.toFixed(2)}</span></div>
                                <div className="grid-item"><span className="label">‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü/‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶Ç</span><span className="value">{accountNumber}</span></div>
                                <div className="grid-item"><span className="label">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏</span><span className="value">{reference || '-'}</span></div>
                                <div className="grid-item new-balance-item full-width"><span className="label">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶π‡¶¨‡ßá</span><span className="value large-value">‡ß≥{(currentAgent.balance - parseFloat(amount))?.toFixed(2)}</span></div>
                            </div>
                        </div>
                        <p className="confirm-instruction">‡¶™‡ßá ‡¶¨‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡ß© ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®</p>
                    </>
                );
            case 5: // Success Screen
                return (
                    <>
                        <h2 className="feature-page-heading centered success-heading agent-success-heading">‡¶™‡ßá ‡¶¨‡¶ø‡¶≤ ‡¶∏‡¶´‡¶≤</h2>
                        <div className="confirmation-details agent-theme-confirm">
                            <div className="confirmation-row">
                                <span className="label">‡¶¨‡¶ø‡¶≤‡¶æ‡¶∞:</span>
                                 <div className="contact-item selected small no-hover"><span className="contact-avatar">{BILLER_CATEGORIES[selectedCategoryKey]?.icon || 'üè¢'}</span><div className="contact-details"><span className="contact-name">{selectedBiller?.name}</span></div></div>
                            </div>
                            <div className="confirmation-grid">
                                <div className="grid-item"><span className="label">‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</span><span className="value">‡ß≥{transactionDetails?.amount?.toFixed(2)}</span></div>
                                <div className="grid-item"><span className="label">‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü/‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶Ç</span><span className="value">{accountNumber}</span></div>
                                <div className="grid-item"><span className="label">‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏</span><span className="value">{reference || (transactionDetails?.description?.includes('Ref:') ? transactionDetails.description.split('Ref: ')[1]?.replace(')','') : '-')}</span></div>
                                <div className="grid-item"><span className="label">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏</span><span className="value bold">‡ß≥{currentAgent?.balance?.toFixed(2)}</span></div>
                                <div className="grid-item full-width"><span className="label">‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø</span><span className="value">{transactionDetails?._id?.slice(-10) || 'N/A'}</span></div>
                            </div>
                        </div>
                        <p className="success-message-text agent-success-text">‡¶™‡ßá ‡¶¨‡¶ø‡¶≤ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá</p>
                    </>
                );
            default: return <p>‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</p>;
        }
    };

    const backString = '‚Üê'

    return (
        <div className="agent-page-layout pay-bill-agent-page">
            <div className="agent-page-top-section">
                {(step === 1 || (step > 1 && step !== 5)) && (
                    <button onClick={handleGoBack} className="agent-back-button">
                      <span className="agent-back-button">{backString}</span> 
                    </button>
                )}
                {(step !== 4 && step !== 5) && <img src={logoPath} alt="CashPay Logo" className="feature-page-logo" />}
                {(step !== 4 && step !== 5) && <h2 className="feature-page-heading agent-theme-heading">‡¶™‡ßá ‡¶¨‡¶ø‡¶≤ {selectedCategoryKey && step > 1 && BILLER_CATEGORIES[selectedCategoryKey] ? `(${BILLER_CATEGORIES[selectedCategoryKey].name})` : ''}</h2>}
            </div>

            <div className="agent-page-content">
                {error && <p className="error-message global-error">{error}</p>}
                {message && !error && <p className="success-message global-success">{message}</p>}
                {renderStepContent()}
            </div>

            {step < 4 && (
                <div className="agent-page-bottom-section">
                    <button onClick={handleNextStep} className="agent-page-next-button"
                        disabled={loading || uiLoading || (step === 1 && !selectedBiller) || (step === 2 && (!accountNumber || !amount))}
                    >
                        {loading || uiLoading ? '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...' : '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ'}
                        {(!loading && !uiLoading) && <span className="button-arrow">{' '}</span>}
                    </button>
                </div>
            )}
            {step === 4 && (
                <div className="agent-page-bottom-section">
                    <button
                        className={`agent-page-next-button confirm-hold-button ${confirmHoldTime > 0 ? 'holding' : ''} ${loading ? 'processing' : ''}`}
                        onMouseDown={handleConfirmMouseDown} onMouseUp={handleConfirmMouseUpOrLeave}
                        onMouseLeave={handleConfirmMouseUpOrLeave} onTouchStart={handleConfirmMouseDown}
                        onTouchEnd={handleConfirmMouseUpOrLeave}
                        disabled={loading || confirmHoldTime === CONFIRM_HOLD_DURATION}
                    >
                        {loading ? '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...' : `‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ (${CONFIRM_HOLD_DURATION - confirmHoldTime} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)`}
                        {(!loading && confirmHoldTime < CONFIRM_HOLD_DURATION) && <span className="button-arrow">{' '}</span>}
                    </button>
                </div>
            )}
            {step === 5 && (
                 <div className="agent-page-bottom-section">
                    <button onClick={() => navigate('/agent/dashboard')} className="agent-page-next-button">
                        ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶® <span className="button-arrow">{' '}</span>
                    </button>
                </div>
            )}
        </div>
    );
}

export default AgentPayBillPage;